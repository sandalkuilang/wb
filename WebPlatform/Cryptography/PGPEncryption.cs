using System;
using System.Collections.Generic;
using System.IO;
 
using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities.IO;
using Org.BouncyCastle.Bcpg;

namespace WebPlatform.Cryptography
{
    public class PGPEncryption : IEncryptionFileAgent
    {
        public Stream DecryptFile(Stream inputStream, char[] passPhrase)
        {
            inputStream = PgpUtilities.GetDecoderStream(inputStream);

            PgpObjectFactory pgpF = new PgpObjectFactory(inputStream);
            PgpObject o = pgpF.NextPgpObject();

            //
            // the first object might be a PGP marker packet.
            //
            PgpEncryptedDataList enc = o as PgpEncryptedDataList;
            if (enc == null)
            {
                enc = (PgpEncryptedDataList)pgpF.NextPgpObject();
            }

            PgpPbeEncryptedData pbe = (PgpPbeEncryptedData)enc[0];

            Stream clear = pbe.GetDataStream(passPhrase);

            PgpObjectFactory pgpFact = new PgpObjectFactory(clear);

            //
            // if we're trying to read a file generated by someone other than us
            // the data might not be compressed, so we check the return type from
            // the factory and behave accordingly.
            //
            o = pgpFact.NextPgpObject();
            if (o is PgpCompressedData)
            {
                PgpCompressedData cData = (PgpCompressedData)o;
                pgpFact = new PgpObjectFactory(cData.GetDataStream());
                o = pgpFact.NextPgpObject();
            }

            PgpLiteralData ld = (PgpLiteralData)o;
            Stream unc = ld.GetInputStream();
            MemoryStream fOut = new MemoryStream(); // = File.Create(ld.FileName);
            Streams.PipeAll(unc, fOut);

            //fOut.Close();
            return fOut;

            /*
            if (pbe.IsIntegrityProtected())
            {
                if (!pbe.Verify())
                {
                    Console.Error.WriteLine("message failed integrity check");
                }
                else
                {
                    Console.Error.WriteLine("message integrity check passed");
                }
            }
            else
            {
                Console.Error.WriteLine("no message integrity check");
            }
            */ 
        }

        public Stream EncryptFile(Stream inputStream, char[] passPhrase, bool armor, bool withIntegrityCheck)
        {
            Stream putStream;
            Stream encOut = null;
            if (armor)
                putStream = new ArmoredOutputStream(inputStream);
            else
                putStream = inputStream;


            try
            {
                //byte[] compressedData = PgpExampleUtilities.CompressFile(fileName, CompressionAlgorithmTag.Zip);

                PgpEncryptedDataGenerator encGen = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5, withIntegrityCheck, new SecureRandom());
                encGen.AddMethod(passPhrase, HashAlgorithmTag.Sha1);

                encOut = encGen.Open(putStream, putStream.Length);
                  
                /*
                encOut.Write(outputStream, 0, outputStream.Length);  
                encOut.Close();
                */

                if (armor)
                {
                    putStream.Close();
                }
            }
            catch (PgpException e)
            {
                Console.Error.WriteLine(e);

                Exception underlyingException = e.InnerException;
                if (underlyingException != null)
                {
                    Console.Error.WriteLine(underlyingException.Message);
                    Console.Error.WriteLine(underlyingException.StackTrace);
                }
            }

            return encOut;
        }
        
    }
}
